{"version":3,"sources":["CryptoList.js","Crypto.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","rates","data","map","element","key","currency","className","colorClass","last","symbol","Crypto","getData","axios","get","then","response","cryptoData","cryptoArray","color","i","prevCryptoValue","state","crypto","undefined","cryptoObject","push","setState","filteredCrypto","filterCrypto","event","filteredCryptoData","filter","cryptoElement","toUpperCase","includes","filterInput","value","this","timer","setInterval","console","log","onChange","ref","input","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAoBeA,EAlBI,SAAAC,GACf,IAAIC,EAAQD,EAAME,KAAKC,KAAI,SAACC,GACxB,OACI,wBAAIC,IAAKD,EAAQE,SAAUC,UAAU,QACjC,0CACA,wBAAIA,UAAWH,EAAQI,YAAaJ,EAAQK,KAA5C,KACA,4BAAKL,EAAQE,UACb,gCAAMF,EAAQM,OAAd,SAIZ,OACI,yBAAKH,UAAU,eACVN,ICyDEU,E,YAlEX,aAAe,IAAD,8BACV,+CAWJC,QAAU,WACNC,IAAMC,IAAI,qCACLC,MAAK,SAAAC,GACF,IAAMC,EAAaD,EAASd,KACxBgB,EAAc,GACdC,EAAQ,OACRC,EAAI,EACR,IAAK,IAAIf,KAAOY,EAAY,CACxB,IAAII,EAAkB,EAAKC,MAAMC,OAAOH,QAChBI,IAApBH,IACGJ,EAAWZ,GAAKI,KAAOY,EAAgBZ,KACtCU,EAAQ,QAEHF,EAAWZ,GAAKI,KAAOY,EAAgBZ,OAC5CU,EAAQ,QAMhB,IAAIM,EAAe,CACfhB,KAAMQ,EAAWZ,GAAKI,KACtBC,OAAQO,EAAWZ,GAAKK,OACxBJ,SAAUD,EACVG,WAAYW,GAEhBD,EAAYQ,KAAKD,GACjBL,IAEJ,EAAKO,SAAS,CAAEJ,OAAQL,EAAaU,eAAgBV,IACrD,EAAKW,mBA1CH,EA8CdA,aAAe,SAAAC,GACX,IAAIC,EAAqB,EAAKT,MAAMC,OAAOS,QAAO,SAAAC,GAC9C,OAAOA,EAAc3B,SAAS4B,cAAcC,SAAS,EAAKC,YAAYC,MAAMH,kBAEhF,EAAKP,SAAS,CAACC,eAAgBG,KAhD/B,EAAKT,MAAQ,CACTC,OAAQ,GACRK,eAAgB,IAJV,E,iFAQVU,KAAK1B,UACL0B,KAAKC,MAAQC,YAAYF,KAAK1B,QAAS,O,+BA4CjC,IAAD,OAEL,OADA6B,QAAQC,IAAIJ,KAAKF,aAEb,yBAAK7B,UAAU,UACX,2CACA,2BAAOoC,SAAUL,KAAKT,aAAce,IAAK,SAAAC,GAAK,OAAI,EAAKT,YAAcS,KACrE,kBAAC,EAAD,CAAY3C,KAAMoC,KAAKhB,MAAMM,sB,GA7DxBkB,aCQNC,MARf,WACE,OACE,yBAAKxC,UAAU,OACb,kBAAC,EAAD,QCKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5C,MAAK,SAAA6C,GACjCA,EAAaC,kB","file":"static/js/main.4eca5492.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CryptoList = props => {\r\n    let rates = props.data.map((element) => {\r\n        return (\r\n            <ul key={element.currency} className='rate'>\r\n                <li>Last rate:</li>\r\n                <li className={element.colorClass}>{element.last} </li>\r\n                <li>{element.currency}</li>\r\n                <li>[{element.symbol}]</li>\r\n            </ul>\r\n        )\r\n    })\r\n    return (\r\n        <div className='crypto-list'>\r\n            {rates}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CryptoList;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport CryptoList from './CryptoList';\r\n\r\nclass Crypto extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            crypto: [],\r\n            filteredCrypto: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData();\r\n        this.timer = setInterval(this.getData, 5000);\r\n    }\r\n\r\n    getData = () => {\r\n        axios.get('https://blockchain.info/pl/ticker')\r\n            .then(response => {\r\n                const cryptoData = response.data;\r\n                let cryptoArray = [];\r\n                let color = 'blue';\r\n                let i = 0;\r\n                for (let key in cryptoData) {\r\n                    let prevCryptoValue = this.state.crypto[i];\r\n                    if (prevCryptoValue !== undefined) {\r\n                        if(cryptoData[key].last > prevCryptoValue.last){\r\n                            color = 'green'\r\n                        }\r\n                        else if (cryptoData[key].last < prevCryptoValue.last) {\r\n                            color = 'red'\r\n                        }\r\n                        else{\r\n                        }\r\n                    }\r\n                    \r\n                    let cryptoObject = {\r\n                        last: cryptoData[key].last,\r\n                        symbol: cryptoData[key].symbol,\r\n                        currency: key,\r\n                        colorClass: color\r\n                    }\r\n                    cryptoArray.push(cryptoObject);\r\n                    i++;\r\n                }\r\n                this.setState({ crypto: cryptoArray, filteredCrypto: cryptoArray });\r\n                this.filterCrypto();\r\n            })\r\n    }\r\n\r\n    filterCrypto = event => {\r\n        let filteredCryptoData = this.state.crypto.filter(cryptoElement => {\r\n            return cryptoElement.currency.toUpperCase().includes(this.filterInput.value.toUpperCase());\r\n        })\r\n        this.setState({filteredCrypto: filteredCryptoData});\r\n    }\r\n\r\n    render() {\r\n        console.log(this.filterInput);\r\n        return (\r\n            <div className='crypto'>\r\n                <h1>Crypto rate</h1>\r\n                <input onChange={this.filterCrypto} ref={input => this.filterInput = input}></input>\r\n                <CryptoList data={this.state.filteredCrypto} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Crypto;","import React from 'react';\nimport './App.css';\nimport Crypto from './Crypto';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Crypto />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}